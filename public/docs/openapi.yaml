openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/v1/register:
    post:
      summary: Регистрация
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Registration is successful'
                properties:
                  message:
                    type: string
                    example: 'Registration is successful'
        422:
          description: 'validation fail'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: validation.email
                  errors:
                    email:
                      - validation.email
                properties:
                  message:
                    type: string
                    example: validation.email
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - validation.email
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'Имя. validation.max.'
                  example: Иван
                last_name:
                  type: string
                  description: 'Фамилия. validation.max.'
                  example: Иванов
                email:
                  type: string
                  description: 'Email. validation.email validation.max.'
                  example: ivan.ivanov@test.org
                password:
                  type: string
                  description: 'Пароль. validation.max.'
                  example: test
              required:
                - first_name
                - last_name
                - email
                - password
      security: []
  /api/v1/login:
    get:
      summary: Авторизация
      operationId: ''
      description: 'После пройденной аутентификации создается accessToken'
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Authorization is successful'
                properties:
                  message:
                    type: string
                    example: 'Authorization is successful'
        403:
          description: 'invalid email or password'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid email or password'
                properties:
                  message:
                    type: string
                    example: 'Invalid email or password'
        422:
          description: 'validation fail'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: validation.email
                  errors:
                    email:
                      - validation.email
                properties:
                  message:
                    type: string
                    example: validation.email
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - validation.email
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Email. validation.email validation.max.'
                  example: ivan.ivanov@test.org
                password:
                  type: string
                  description: 'Пароль. validation.max.'
                  example: test
              required:
                - email
                - password
      security: []
  /api/v1/users:
    get:
      summary: 'Список пользователей'
      operationId: ''
      description: "Отдается порционно по 20 пользователей.\nДля получения следующих страниц, необходимо передать `page` с номером страницы."
      parameters:
        -
          in: query
          name: page
          description: 'Номер страницы.'
          example: '2'
          required: false
          schema:
            type: string
            description: 'Номер страницы.'
            example: '2'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    first_name: Иван
                    last_name: Иванов
                    email: ivan.ivanov@test.org
      tags:
        - Endpoints
  /api/v1/chats:
    post:
      summary: 'Создание чата'
      operationId: ''
      description: "Создается чат с передаваемым пользователем, если его не существует.\n\nДля создания чата с пользователем, необходимо в параметрах передать `user_id`."
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Chat created'
                properties:
                  message:
                    type: string
                    example: 'Chat created'
        404:
          description: 'user not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User not found'
                properties:
                  message:
                    type: string
                    example: 'User not found'
        409:
          description: 'chat already exist'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Chat already exist'
                properties:
                  message:
                    type: string
                    example: 'Chat already exist'
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ''
                  example: 15
              required:
                - user_id
tags:
  -
    name: Endpoints
    description: ''
